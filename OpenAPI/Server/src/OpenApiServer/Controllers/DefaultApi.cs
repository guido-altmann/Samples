/*
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using OpenApiServer.Attributes;
using Microsoft.AspNetCore.Authorization;
using OpenApiServer.Models;

namespace OpenApiServer.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        private static List<User> _users = new List<User>(
            new[]
            {
                new User { Id = 1, Name = "User 1" },
                new User { Id = 2, Name = "User 2" }
            });

        private static List<Product> _products = new List<Product>(new[]
        {
            new Product() { Id = 1, Name = "Product 1", Price = 23.50M },
            new Product() { Id = 2, Name = "Product 2", Price = 25.80M }
        });


        /// <summary>
        /// Returns a list of products.
        /// </summary>
        /// <remarks>Optional extended description in CommonMark or HTML.</remarks>
        /// <response code="200">A JSON array of user names</response>
        [HttpGet]
        [Route("/v1/products")]
        [ValidateModelState]
        [SwaggerOperation("ProductsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Product), description: "A JSON array of products")]
        public virtual IActionResult ProductsGet()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Product));
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"price\" : 6.027456183070403,\r\n  \"name\" : \"name\",\r\n  \"id\" : 1\r\n}";
            
            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<Product>(exampleJson)
            //: default(Product);

            //TODO: Change the data returned
            return new ObjectResult(_products);
        }

        /// <summary>
        /// Creates a new product.
        /// </summary>
        /// <param name="product"></param>
        /// <response code="201">Created</response>
        [HttpPost]
        [Route("/v1/products")]
        [ValidateModelState]
        [SwaggerOperation("ProductsPost")]
        public virtual IActionResult ProductsPost([FromBody]Product product)
        {
            if (_products.Any(p => p.Id == product.Id))
                return ValidationProblem( new ValidationProblemDetails(){Detail = "Product already exists."});

            _products.Add(product);
            return StatusCode(201);
        }

        /// <summary>
        /// Returns a product by ID.
        /// </summary>
        /// <param name="productId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/products/{productId}")]
        [ValidateModelState]
        [SwaggerOperation("ProductsProductIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Product), description: "OK")]
        public virtual IActionResult ProductsProductIdGet([FromRoute][Required]int productId)
        {
            var product = _products.Find(p => p.Id == productId);
            if (product == null)
                return NotFound();

            return StatusCode(200, product);
        }

        /// <summary>
        /// Returns a list of users.
        /// </summary>
        /// <remarks>Optional extended description in CommonMark or HTML.</remarks>
        /// <response code="200">A JSON array of user names</response>
        [HttpGet]
        [Route("/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("UsersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "A JSON array of user names")]
        public virtual IActionResult UsersGet()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n}";
            
            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<User>(exampleJson)
            //: default(User);

            //TODO: Change the data returned
            return new ObjectResult(_users);
        }

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <param name="user"></param>
        /// <response code="201">Created</response>
        [HttpPost]
        [Route("/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("UsersPost")]
        public virtual IActionResult UsersPost([FromBody]User user)
        {

            if (_users.Any(u => u.Id == user.Id))
                return ValidationProblem(new ValidationProblemDetails() { Detail = "User already exists." });

            _users.Add(user);
            return StatusCode(201);
        }

        /// <summary>
        /// Returns a user by ID.
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">OK</response>
        /// <response code="400">The specified user ID is invalid (not a number).</response>
        /// <response code="404">A user with the specified ID was not found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v1/users/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "OK")]
        public virtual IActionResult UsersUserIdGet([FromRoute][Required]int userId)
        {

            var user = _users.Find(u => u.Id == userId);
            if (user == null)
                return NotFound();

            return StatusCode(200, user);
        }
    }
}
