/* 
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenApiClient.Client;
using OpenApiClient.Model;

namespace OpenApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a list of products.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductsGet ();

        /// <summary>
        /// Returns a list of products.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductsGetWithHttpInfo ();
        /// <summary>
        /// Creates a new product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns></returns>
        void ProductsPost (Product product);

        /// <summary>
        /// Creates a new product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsPostWithHttpInfo (Product product);
        /// <summary>
        /// Returns a product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Product</returns>
        Product ProductsProductIdGet (int productId);

        /// <summary>
        /// Returns a product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsProductIdGetWithHttpInfo (int productId);
        /// <summary>
        /// Returns a list of users.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersGet ();

        /// <summary>
        /// Returns a list of users.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersGetWithHttpInfo ();
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns></returns>
        void UsersPost (User user);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersPostWithHttpInfo (User user);
        /// <summary>
        /// Returns a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User UsersUserIdGet (int userId);

        /// <summary>
        /// Returns a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIdGetWithHttpInfo (int userId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a list of products.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductsGetAsync ();

        /// <summary>
        /// Returns a list of products.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsPostAsync (Product product);

        /// <summary>
        /// Creates a new product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsPostAsyncWithHttpInfo (Product product);
        /// <summary>
        /// Returns a product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsProductIdGetAsync (int productId);

        /// <summary>
        /// Returns a product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsProductIdGetAsyncWithHttpInfo (int productId);
        /// <summary>
        /// Returns a list of users.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersGetAsync ();

        /// <summary>
        /// Returns a list of users.
        /// </summary>
        /// <remarks>
        /// Optional extended description in CommonMark or HTML.
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersPostAsync (User user);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersPostAsyncWithHttpInfo (User user);
        /// <summary>
        /// Returns a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIdGetAsync (int userId);

        /// <summary>
        /// Returns a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdGetAsyncWithHttpInfo (int userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private OpenApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = OpenApiClient.Client.Configuration.MergeConfigurations(
                OpenApiClient.Client.GlobalConfiguration.Instance,
                new OpenApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(OpenApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenApiClient.Client.Configuration.MergeConfigurations(
                OpenApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(OpenApiClient.Client.ISynchronousClient client,OpenApiClient.Client.IAsynchronousClient asyncClient, OpenApiClient.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenApiClient.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a list of products. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductsGet ()
        {
             OpenApiClient.Client.ApiResponse<List<Product>> localVarResponse = ProductsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of products. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public OpenApiClient.Client.ApiResponse< List<Product> > ProductsGetWithHttpInfo ()
        {
            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Product> >("/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of products. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductsGetAsync ()
        {
             OpenApiClient.Client.ApiResponse<List<Product>> localVarResponse = await ProductsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of products. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<List<Product>>> ProductsGetAsyncWithHttpInfo ()
        {

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Product>>("/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new product. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns></returns>
        public void ProductsPost (Product product)
        {
             ProductsPostWithHttpInfo(product);
        }

        /// <summary>
        /// Creates a new product. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenApiClient.Client.ApiResponse<Object> ProductsPostWithHttpInfo (Product product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new OpenApiClient.Client.ApiException(400, "Missing required parameter 'product' when calling DefaultApi->ProductsPost");

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = product;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new product. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsPostAsync (Product product)
        {
             await ProductsPostAsyncWithHttpInfo(product);

        }

        /// <summary>
        /// Creates a new product. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<Object>> ProductsPostAsyncWithHttpInfo (Product product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new OpenApiClient.Client.ApiException(400, "Missing required parameter 'product' when calling DefaultApi->ProductsPost");


            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = product;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a product by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Product</returns>
        public Product ProductsProductIdGet (int productId)
        {
             OpenApiClient.Client.ApiResponse<Product> localVarResponse = ProductsProductIdGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a product by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Product</returns>
        public OpenApiClient.Client.ApiResponse< Product > ProductsProductIdGetWithHttpInfo (int productId)
        {
            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("productId", OpenApiClient.Client.ClientUtils.ParameterToString(productId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Product >("/products/{productId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a product by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsProductIdGetAsync (int productId)
        {
             OpenApiClient.Client.ApiResponse<Product> localVarResponse = await ProductsProductIdGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a product by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<Product>> ProductsProductIdGetAsyncWithHttpInfo (int productId)
        {

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("productId", OpenApiClient.Client.ClientUtils.ParameterToString(productId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Product>("/products/{productId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of users. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersGet ()
        {
             OpenApiClient.Client.ApiResponse<List<User>> localVarResponse = UsersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of users. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public OpenApiClient.Client.ApiResponse< List<User> > UsersGetWithHttpInfo ()
        {
            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of users. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersGetAsync ()
        {
             OpenApiClient.Client.ApiResponse<List<User>> localVarResponse = await UsersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of users. Optional extended description in CommonMark or HTML.
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo ()
        {

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns></returns>
        public void UsersPost (User user)
        {
             UsersPostWithHttpInfo(user);
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenApiClient.Client.ApiResponse<Object> UsersPostWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new OpenApiClient.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UsersPost");

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersPostAsync (User user)
        {
             await UsersPostAsyncWithHttpInfo(user);

        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<Object>> UsersPostAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new OpenApiClient.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UsersPost");


            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = user;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a user by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User UsersUserIdGet (int userId)
        {
             OpenApiClient.Client.ApiResponse<User> localVarResponse = UsersUserIdGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a user by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public OpenApiClient.Client.ApiResponse< User > UsersUserIdGetWithHttpInfo (int userId)
        {
            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = OpenApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", OpenApiClient.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a user by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIdGetAsync (int userId)
        {
             OpenApiClient.Client.ApiResponse<User> localVarResponse = await UsersUserIdGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a user by ID. 
        /// </summary>
        /// <exception cref="OpenApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OpenApiClient.Client.ApiResponse<User>> UsersUserIdGetAsyncWithHttpInfo (int userId)
        {

            OpenApiClient.Client.RequestOptions localVarRequestOptions = new OpenApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", OpenApiClient.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
